package sorteo;

import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Calendar;
import java.util.Date;

import javax.imageio.ImageIO;

import org.json.simple.parser.*;
import org.json.simple.JSONObject;
import org.json.simple.JSONArray;




public class Prueba {

	public static void main(String[] args) {

		try {
			f8();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	public static void f8() {
		
		//JsonParsing.class.getResourceAsStream( "sample-json.txt");
		String str = "[{\"name\" : \"boletos\",\"color\":\"#FFFFFF\",\"type\": \"map\",\"data\": [{\"name\": \"Jesus María\",\"path\": \"M543,-486,545,-485C545,-484,544,-484,543,-483,542,-481,542,-480,542,-478,542,-477,542,-476,542,-475,542,-475,542,-474,542,-474L542,-473C542,-473,544,-477,544,-477,544,-478,545,-481,546,-481L571,-481,571,-470,585,-469,584,-458C584,-457,583,-457,582,-456,580,-455,581,-453,580,-452,579,-450,573,-454,572,-454,571,-455,570,-455,569,-456,569,-456,568,-457,567,-457,567,-456,568,-455,568,-453,568,-451,569,-450,570,-448,571,-446,573,-447,575,-447L575,-443C575,-439,570,-439,571,-435,572,-433,577,-433,578,-430,579,-429,580,-426,580,-424,580,-423,578,-424,577,-425,572,-426,567,-426,567,-432L567,-432C567,-432,567,-432,567,-432,566,-431,564,-429,563,-428,563,-428,563,-425,563,-424,563,-421,573,-420,576,-419,577,-417,574,-411,573,-408L571,-404L571,-404L569,-400,569,-392,543,-392,543,-379,510,-383,515,-372,507,-372,507,-357,504,-357C501,-357,499,-359,496,-360,495,-360,491,-362,490,-361,490,-357,491,-352,490,-348,485,-348,482,-350,478,-352,474,-354,471,-353,466,-353,465,-354,465,-350,465,-349,464,-349,461,-349,460,-348,461,-343,466,-342,467,-338L454,-338C448,-337,444,-335,439,-331,436,-329,435,-329,434,-325,434,-320,435,-319,431,-316,428,-315,430,-313,428,-311,428,-310,428,-308,428,-307,427,-306,425,-306,425,-305,425,-302,425,-299,425,-296,425,-294,423,-294,422,-292,422,-292,422,-287,422,-286,421,-284,417,-278,416,-277,413,-274,409,-273,406,-270,404,-268,403,-261,402,-258,400,-258,398,-259,395,-259,395,-259,395,-259,395,-259L395,-256,388,-256C385,-256,383,-255,383,-258L363,-257C361,-255,361,-253,358,-255,355,-258,355,-256,353,-254,351,-253,350,-255,349,-255,347,-257,345,-258,344,-256,343,-254,342,-249,340,-250,336,-251,334,-255,329,-252L320,-247L320,-247L319,-249C316,-252,313,-257,309,-259L309,-259C309,-259,309,-259,309,-259,303,-259,297,-259,292,-257,286,-256,281,-250,275,-248L276,-259C276,-262,277,-265,277,-268,277,-270,273,-271,272,-273,272,-273,272,-276,273,-277,273,-278,274,-284,273,-285,273,-286,268,-290,267,-290,267,-291,267,-292,267,-293,267,-296,265,-299,265,-302,265,-304,263,-308,264,-308,266,-308,267,-307,269,-308,271,-308,272,-308,273,-310,275,-312,277,-309,278,-309,278,-311,279,-314,279,-317,279,-319,280,-322,277,-321,276,-321,274,-322,273,-322,273,-323,276,-326,276,-328,278,-331,277,-334,278,-337,278,-338,281,-342,282,-342,282,-343,279,-343,278,-343,277,-343,274,-342,273,-343L273,-346C273,-346,276,-347,277,-347,278,-347,283,-348,283,-350,283,-350,281,-351,280,-351,280,-352,279,-353,279,-354,278,-356,278,-358,275,-358,275,-359,279,-362,279,-362L279,-362L270,-362C270,-363,271,-364,271,-366L271,-377C271,-379,268,-380,268,-381L268,-381C268,-382,271,-381,271,-383L271,-388C273,-388,277,-385,279,-385,279,-387,279,-389,279,-391,279,-393,281,-396,278,-397,278,-397,278,-397,278,-397L278,-397C280,-397,284,-401,285,-403L286,-414L286,-414L292,-409C296,-408,303,-407,307,-407,307,-410,311,-414,311,-417L320,-417C320,-417,323,-413,324,-414,326,-415,328,-417,330,-417,334,-416,341,-418,346,-418,350,-419,349,-421,352,-422,354,-423,358,-418,360,-417,362,-415,366,-415,369,-415L369,-415C369,-417,367,-421,366,-423,366,-426,364,-429,364,-432,363,-432,362,-429,360,-429L360,-429C360,-431,358,-432,358,-434,359,-435,360,-438,360,-438,358,-438,356,-440,354,-440,353,-441,356,-450,358,-450,359,-449,368,-450,368,-449,367,-441,377,-445,382,-444,384,-444,387,-444,388,-441,389,-438,389,-434,390,-431,390,-429,389,-427,391,-427,395,-429,399,-432,402,-429,403,-427,404,-427,405,-426,406,-425,408,-431,408,-432,410,-435,422,-434,426,-434,427,-434,431,-434,432,-435,432,-436,433,-438,434,-438,431,-438,427,-441,424,-442,426,-446,426,-451,427,-455L430,-464C430,-466,430,-467,432,-467,437,-467,435,-467,436,-471,437,-474,439,-474,439,-478L439,-489L439,-489L468,-489C471,-494,473,-495,471,-500,470,-506,473,-505,474,-509,478,-509,480,-497,484,-502,486,-503,488,-498,488,-497,488,-496,489,-492,492,-493,492,-494,492,-496,493,-497,494,-498,496,-497,497,-499,497,-499,495,-501,495,-502,495,-503,497,-503,498,-504,500,-506,496,-512,501,-511,505,-509,511,-509,515,-509,515,-509,516,-509,517,-508,518,-502,514,-500,522,-500L526,-500C526,-499,527,-496,528,-495,525,-494,521,-495,518,-495,517,-495,517,-495,518,-493,518,-492,520,-487,519,-486,519,-484,517,-484,515,-483,515,-483,516,-481,516,-481,516,-476,516,-474,521,-474,520,-476,520,-477,520,-478,520,-483,527,-481,530,-483,533,-485,531,-491,535,-489,537,-488,541,-488,543,-486z\"},{\"name\": \"Calvillo\",\"path\": \"M178,-557,182,-556C182,-550,179,-547,175,-542,175,-541,176,-538,177,-537,178,-536,182,-536,183,-536,184,-538,182,-540,184,-542,189,-544,185,-545,187,-550,188,-553,192,-550,195,-550,196,-546,194,-545,199,-545,201,-545,199,-541,199,-540,197,-538,206,-535,206,-537,206,-538,205,-539,206,-540,208,-542,217,-543,220,-544,224,-544,226,-542,230,-539,232,-538,234,-536,236,-535,240,-533,245,-531,247,-527L252,-516C252,-514,256,-502,255,-501,253,-499,250,-498,248,-496,247,-495,248,-491,247,-489,247,-487,247,-487,249,-486,252,-485,251,-486,254,-488,257,-490,258,-488,261,-488,261,-490,261,-493,261,-495,261,-497,260,-499,262,-498L269,-496C271,-496,269,-482,269,-479L267,-463,274,-462,282,-460,279,-434C281,-433,281,-434,281,-432,281,-430,281,-428,281,-426,283,-426,284,-427,285,-426L285,-426C285,-424,284,-421,282,-419,279,-415,285,-417,286,-414L286,-414L285,-403C284,-401,280,-397,278,-397L278,-397C278,-397,278,-397,278,-397,281,-396,279,-393,279,-391,279,-389,279,-387,279,-385,277,-385,273,-388,271,-388L271,-383C271,-381,268,-382,268,-381L268,-381C268,-380,271,-379,271,-377L271,-366C271,-364,270,-363,270,-362L279,-362L279,-362C279,-362,275,-359,275,-358,278,-358,278,-356,279,-354,279,-353,280,-352,280,-351,281,-351,283,-350,283,-350,283,-348,278,-347,277,-347,276,-347,273,-346,273,-346L273,-343C274,-342,277,-343,278,-343,279,-343,282,-343,282,-342,281,-342,278,-338,278,-337,277,-334,278,-331,276,-328,276,-326,273,-323,273,-322,274,-322,276,-321,277,-321,280,-322,279,-319,279,-317,279,-314,278,-311,278,-309,277,-309,275,-312,273,-310,272,-308,271,-308,269,-308,267,-307,266,-308,264,-308,263,-308,265,-304,265,-302,265,-299,267,-296,267,-293,267,-292,267,-291,267,-290,268,-290,273,-286,273,-285,274,-284,273,-278,273,-277,272,-276,272,-273,272,-273,273,-272,277,-270,277,-268,277,-265,276,-262,276,-259L275,-248C281,-250,286,-256,292,-257,297,-259,303,-259,309,-259,309,-259,309,-259,309,-259L309,-259C313,-257,316,-252,319,-249L320,-247L320,-247L318,-244C318,-243,317,-242,317,-241,318,-241,318,-241,318,-240,319,-239,321,-238,321,-237,321,-236,321,-234,321,-233,322,-230,325,-229,328,-229,329,-228,332,-225,331,-223,329,-221,327,-219,324,-219,317,-219,309,-223,306,-215,304,-209,311,-211,311,-206L311,-206C308,-206,306,-206,304,-206,303,-206,303,-206,303,-206,303,-205,303,-201,302,-201,302,-199,302,-197,303,-195,303,-194,304,-193,302,-193,300,-194,297,-196,295,-193,295,-191,293,-190,291,-189,290,-189,285,-189,285,-188,285,-187,286,-186,286,-185,286,-185,286,-185,286,-185,284,-185,283,-186,281,-186L278,-184L278,-184C274,-184,271,-184,271,-186,270,-188,271,-194,269,-196,265,-197,264,-193,262,-192,258,-190,255,-195,251,-196,249,-196,247,-196,245,-199,241,-203,237,-210,230,-206,227,-203,226,-203,222,-203,219,-205,219,-208,215,-206,211,-204,209,-203,205,-205,198,-208,197,-195,190,-194,186,-193,183,-195,180,-191,176,-186,173,-182,172,-176,172,-173,175,-172,176,-170,176,-167,171,-168,170,-168,165,-170,159,-168,156,-173,154,-173,152,-164,152,-162,151,-158,141,-154,136,-155,133,-155,129,-160,126,-159L126,-159L111,-170C107,-172,103,-180,99,-176,96,-174,94,-180,94,-182,95,-184,91,-183,90,-185L88,-189C86,-193,78,-199,75,-200,72,-201,69,-203,67,-205,65,-208,62,-205,60,-207,58,-209,55,-213,54,-214,53,-217,54,-220,53,-223,53,-225,50,-226,50,-228,48,-230,48,-232,47,-234,44,-238,38,-234,34,-238,33,-240,32,-240,30,-239,27,-239,26,-239,24,-239,23,-242,24,-242,26,-243,27,-244,25,-246,25,-248,25,-250,27,-252,26,-254,25,-256,27,-258,27,-259,28,-261,29,-264,29,-266,29,-267,27,-269,27,-270,28,-271,28,-271,29,-272,29,-276,30,-277,25,-277,21,-277,17,-277,15,-282,14,-286,13,-288,8,-288,7,-289,6,-290,4,-291,0,-296,4,-300,7,-303,10,-306,13,-307,14,-311,14,-313,14,-316,16,-318,17,-320,17,-320,16,-322,15,-325,16,-325,18,-326,20,-328,19,-331,20,-334,22,-336,24,-340,24,-342,26,-348,27,-352,30,-357,31,-358,33,-360,31,-361,29,-361,31,-363,31,-364,33,-365,33,-371,34,-373,34,-377,34,-383,36,-386,37,-388,38,-389,40,-388,41,-387,42,-390,43,-391,46,-395,53,-402,54,-407,54,-411,56,-413,57,-417L63,-432C65,-435,66,-438,67,-441,69,-446,74,-451,77,-456L89,-473,115,-513C118,-519,124,-529,130,-532L166,-552C170,-553,175,-555,178,-557z\"},]}]";
		
		JSONParser parser = new JSONParser();
		try {
			Object obj = parser.parse(str);
			JSONArray data =
					((JSONArray)
					((JSONObject)
					((JSONArray)
					obj
					).get(0)
					).get("data")
					);
			
			((JSONObject)data.get(0)).put("color", "#E6E6E6");
			
			// #E6E6E6
			// #005645
			
			System.out.println("obj=" + obj.toString());
			
			
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public static void f7() {
		String str = null;
		
		if("Hola".equals(str))
			System.out.println("OK if");
		else
			System.out.println("OK else");
		
	}
	
	public static void f6() {
		String ABC = "ABC";
		String x = ABC.substring(0, 1);  // "a"   81686186H
		String y = ABC.substring(0, 1);  // "a"   65446545H
		
		System.out.print("'" + x + "' es ");
		if (x.equals(y))
			System.out.print("igual a");
		else
			System.out.print("diferente de");

		System.out.print(" '" + y + "'           --x--");
	}
	
	public static void f5() {
		int yournumber=478;
		String str = String.format("%010d", yournumber);
		System.out.println("str=" + str);
	}
	
	public static void f4()
	{
		System.out.println("1 >>" + toFrase("ROGELIO"));
		System.out.println("2 >>" + toFrase("Rogelio"));
		System.out.println("3 >>" + toFrase("rogelio"));
		System.out.println("4 >>" + toFrase("ROGELIO ANDRES"));
		System.out.println("5 >>" + toFrase("   ROGELIO   ANDRES árgol"));
		System.out.println("6 >>" + toFrase("  rogelio  andrés "));
	}
	
	public static String toFrase(String str){
		StringBuilder sb = new StringBuilder();
		str = str.toLowerCase();
		char car;
		boolean first = true;
		for (int i = 0; i < str.length(); i++) {
			car = str.charAt(i);
			if (car == ' '){
				if (!first )
					sb.append(car);
			}
			else if (first)
				sb.append(Character.toUpperCase(car));
			else
				sb.append(car);
			first = (boolean)(car == ' ');
		}
		return sb.toString();
	}
	
	public static void f3()
	{
		StringBuilder sb = new StringBuilder();
		sb.append("{'result':'ok'},");
		sb.delete(sb.length()-1, sb.length());
		
		System.out.print(sb.toString());
	}
	
	@SuppressWarnings("deprecation")
	public static void f2()
	{
		Calendar cal = Calendar.getInstance();
		Date date = cal.getTime();

		/*
		yyyy-MM-dd-hh-mm-ss
		2018-01-11-15-58-59
		*/
		
		// ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
		// XXX XX XXXXXXX X XX X X XXXX XXXXXXX
		
		
	//	String cve = "KW9NQ-BZ8MS-FU1E5-RP6H0-4YJCN-73AIL";
		//            AAAAA-AAAAA-AAAAA-AAAAA-AAAAA-AAAAA
		//            AAACU-
		
		System.out.println("id = " + date.getDay());
	}
	
	public static String createRandomID() {
		StringBuilder sb = new StringBuilder();
		for (int j = 0; j < 8; j++) {
			if (j > 0)
				sb.append("-");
			for (int i = 0; i < 4; i++)
				sb.append((char) (65 + (int) (Math.random() * 26.0)));
		}
		return sb.toString();
	}

	public static String cut(String html) {
		if (html.indexOf(" ") < 0)
			return html;
		int medium = html.length() / 2;
		int pos = -1;
		for (int i = 0; i < medium; i++) {
			if (html.charAt(medium + i) == ' ') {
				pos = medium + i;
				break;
			}
			if (html.charAt(medium - i) == ' ') {
				pos = medium - i;
				break;
			}
		}
		return html.substring(0, pos).replaceAll(" ", "&nbsp;") + " "
			+ html.substring(pos + 1).replaceAll(" ", "&nbsp;");
	}
	
	public static void f1() throws IOException {

		BufferedImage bufferedImage = null;
		try {
			bufferedImage = ImageIO.read(new File("C:/Anahuac/boleto.png"));
		} catch (IOException e) { return; }

		String key = "007625";
		int x = bufferedImage.getWidth() - 225;
		int y = 72;

        Graphics graphics = bufferedImage.getGraphics();
        graphics.setFont(new Font("Tahoma", Font.BOLD, 45));

        graphics.setColor(new Color(188, 157, 136));
		graphics.drawString(key, x + 1, y + 1);
		graphics.setColor(new Color(176, 73, 4));
        graphics.drawString(key, x, y);

		ImageIO.write(bufferedImage, "png", new File("C:/Anahuac/" + key + ".png"));
	}
	
}
